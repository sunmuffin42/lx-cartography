<owl:ObjectProperty rdf:ID="hasMember">
    <rdfs:label xml:lang="en">has member</rdfs:label>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string">The entities that are classified by a same concept or a same set of concepts, either defined by the same description or not, are easier to compare, and can be put in a same collection. The memberOf relation holds between collections and entities. The following example: (memberOf(D'Alema, ItalianGovernmentCollective, 2007) asserts that D'Alema is a member of the Italian Government collective in 2007. Italian Government collective is intended here as the collection of all members from a particular Italian government. Note that ItalianGovernmentCollective is not the same entity as ItalianGovernment, which is a social agent.</rdfs:comment>
    <owl:inverseOf>
        <owl:ObjectProperty rdf:ID="isMemberOf"/>
    </owl:inverseOf>
    <rdfs:range rdf:resource="#Entity"/>
    <rdfs:domain rdf:resource="#Collection"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#isUnifiedBy">
    <rdfs:label xml:lang="en">is unified by</rdfs:label>
    <rdfs:domain rdf:resource="#Collection"/>
    <rdfs:range rdf:resource="#Description"/>
    <owl:inverseOf>
        <owl:ObjectProperty rdf:ID="unifies"/>
    </owl:inverseOf>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#isIntroducedBy">
    <rdfs:domain rdf:resource="#SocialAgent"/>
    <owl:inverseOf>
        <owl:ObjectProperty rdf:ID="introduces"/>
    </owl:inverseOf>
    <rdfs:range rdf:resource="#Description"/>
    <rdfs:label xml:lang="en">is introduced by</rdfs:label>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:ID="expresses">
    <rdfs:label xml:lang="en">expresses</rdfs:label>
    <rdfs:range rdf:resource="#SchematicEntity"/>
    <owl:inverseOf>
        <owl:ObjectProperty rdf:about="#isExpressedBy"/>
    </owl:inverseOf>
    <rdfs:domain rdf:resource="#InformationObject"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string">The expresses relation is the projection of c.DnS over information objects and schematic entities at a time. It formalizes the intuition that every description is communicable in principle. For example: expresses(ItalianConstitutionText, ItalianConstitution, 1946)</rdfs:comment>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:ID="usesConcept">
    <rdfs:label xml:lang="en">uses concept</rdfs:label>
    <owl:inverseOf>
        <owl:ObjectProperty rdf:ID="isConceptUsedIn"/>
    </owl:inverseOf>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string">The usesConcept relation reflects the fact that, besides defining concepts, descriptions can also use concepts defined by some other description. For example, uses(ChiefOfStateVisitEtiquette, MasterOfCeremonies)</rdfs:comment>
    <rdfs:range rdf:resource="#Concept"/>
    <rdfs:domain rdf:resource="#Description"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:ID="conceptualizes">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string">The conceptualizes relation is the projection of c.DnS over social agents and schematic entities. It formalizes the intuition of the social nature of a description, i.e. the mapping of descriptions on social agents that are acted by one or more physical agents. Note that by social nature we do not mean that a description should actually be shared by a community (although this is typically what happens), but that a description must be communicable among social agents. For example: shares(Napolitano, LawForGovernmentFormation, 2006)</rdfs:comment>
    <owl:inverseOf>
        <owl:ObjectProperty rdf:about="#isConceptualizedBy"/>
    </owl:inverseOf>
    <rdfs:range rdf:resource="#SchematicEntity"/>
    <rdfs:domain rdf:resource="#SocialAgent"/>
    <rdfs:label xml:lang="en">conceptualizes</rdfs:label>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:ID="defines">
    <rdfs:label xml:lang="en">defines</rdfs:label>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string">The defines relation is the projection of c.DnS over descriptions and concepts. Defines formalizes the intuition of a gestalt, or cognitive context, that gives meaning to the parts of a perceived situation. Some examples are modelled here: defines(ItalianConstitution, Minister) defines(LinneanTaxonomy, Species) defines(CNRRegulation, SeniorResearcher)</rdfs:comment>
    <rdfs:domain rdf:resource="#Description"/>
    <rdfs:range rdf:resource="#Concept"/>
    <owl:inverseOf>
        <owl:ObjectProperty rdf:about="#isDefinedIn"/>
    </owl:inverseOf>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#isDefinedIn">
    <rdfs:label xml:lang="en">is defined in</rdfs:label>
    <rdfs:domain rdf:resource="#Concept"/>
    <rdfs:range rdf:resource="#Description"/>
    <owl:inverseOf rdf:resource="#defines"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#isClassifiedBy">
    <rdfs:label xml:lang="en">is classified by</rdfs:label>
    <rdfs:domain rdf:resource="#Entity"/>
    <rdfs:range rdf:resource="#Concept"/>
    <owl:inverseOf>
        <owl:ObjectProperty rdf:ID="classifies"/>
    </owl:inverseOf>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:ID="redescribes">
    <rdfs:domain rdf:resource="#SocialAgent"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string">The application of epistemological layering is fundamental in c.DnS, since it accounts for the role of agents in the application of a description to some situation, i.e., in order to include the ontological commitment within an ontologys domain of discourse. In practice, ontological commitment postulates the action of some agent that has the capability and the intention to (re)describe a situation. This is formalized by means of the relation 'redescribes', which is the projection of c.DnS over social agents and situations. For example: redescribes(SherlockHolmes, HoundOfBaskervilleFact, 1890)</rdfs:comment>
    <rdfs:range rdf:resource="#Situation"/>
    <rdfs:label xml:lang="en">redescribes</rdfs:label>
    <owl:inverseOf>
        <owl:ObjectProperty rdf:ID="isRedescribedBy"/>
    </owl:inverseOf>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:ID="isInScopeOf">
    <rdfs:label xml:lang="en">is in scope of</rdfs:label>
    <rdfs:comment>The hasInScope relation reflects the intuition that situations can be epistemologically layered when a description d1 describes another description d2. When this happens, any situation s1 that satisfies d1 'has in its scope' another situation s2 that satisfies d2. A theorem is that s1 is a setting for d2. For example: hasInScope(MurderCase_1, CaesarStabbedByBrutus) means that a certain murder case (a murder situation under a certain normative description) has in scope the social fact (an aggression situation under a social description) of Caesar being stabbed by Brutus. This assertion is the consequence that a normative description has been applied to a social fact, involving its social description (e.g. a witness report), which becomes an element in the setting of the murder case. Notice that we cannot also claim that Caesar being stabbed by Brutus is on its turn in the setting of the murder case, because the case is precisely about evaluating that reported fact, not about assuming it.</rdfs:comment>
    <owl:inverseOf>
        <owl:ObjectProperty rdf:ID="hasInScope"/>
    </owl:inverseOf>
    <rdfs:range rdf:resource="#Situation"/>
    <rdfs:domain rdf:resource="#Situation"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:ID="isCharacterizedBy">
    <rdfs:label xml:lang="en">is characterized by</rdfs:label>
    <rdfs:domain rdf:resource="#Collection"/>
    <rdfs:range rdf:resource="#Concept"/>
    <owl:inverseOf>
        <owl:ObjectProperty rdf:ID="characterizes"/>
    </owl:inverseOf>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:ID="isAssumedBy">
    <rdfs:range rdf:resource="#SocialAgent"/>
    <rdfs:label xml:lang="en">is assumed by</rdfs:label>
    <rdfs:domain rdf:resource="#SchematicEntity"/>
    <owl:inverseOf>
        <owl:ObjectProperty rdf:ID="assumes"/>
    </owl:inverseOf>
    <rdfs:subPropertyOf>
        <owl:ObjectProperty rdf:about="#isConceptualizedBy"/>
    </rdfs:subPropertyOf>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#assumes">
    <rdfs:domain rdf:resource="#SocialAgent"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Assumes is here proposed as a more specific way of sharing a description. For a full definition of assumption we should axiomatize the relation between assumptions of descriptions, and beliefs about situations: while sharing a description is certainly required to an agent in order to believe a situation that satisfies that description, it is not sufficient to conclude that sharing is sufficient to that agent to actually believe it. The issue is even subtler, because we cannot either conclude that assuming that description is sufficient to believe that situation, since there can be additional constraints that make a situation unbelievable. Conversely, there can be cases in which a situation is believed without assuming the description it satisfies. We do not attempt an axiomatization of these epistemological issues here. For example: assumes(Stahl, FlogistonTheory) assumes(Lavoisier, OxygenTheory)</rdfs:comment>
    <rdfs:range rdf:resource="#SchematicEntity"/>
    <rdfs:label xml:lang="en">assumes</rdfs:label>
    <owl:inverseOf rdf:resource="#isAssumedBy"/>
    <rdfs:subPropertyOf rdf:resource="#conceptualizes"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#characterizes">
    <rdfs:label xml:lang="en">characterizes</rdfs:label>
    <rdfs:range rdf:resource="#Collection"/>
    <rdfs:domain rdf:resource="#Concept"/>
    <owl:inverseOf rdf:resource="#isCharacterizedBy"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Many collections can have subcollections covered by different concepts. In that case, we say that those concepts characterize the collection. Since subcollections can change without affecting the identity of a collection, characterizes is temporalized (time indexing cannot be encoded in OWL1.0).</rdfs:comment>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:ID="isAbout">
    <rdfs:label xml:lang="en">is about</rdfs:label>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Aboutness states that, if the description expressed by an information object is satisfied by a situation, the information object can be about any entity that is in the setting of said situation. Such composition cannot be expressed in OWL. For example, the Italian Constitution is (also) about Italy.</rdfs:comment>
    <owl:inverseOf>
        <owl:ObjectProperty rdf:ID="isReferentOf"/>
    </owl:inverseOf>
    <rdfs:domain rdf:resource="#InformationObject"/>
    <rdfs:range rdf:resource="#Entity"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:ID="instantiatesAgent">
    <owl:inverseOf>
        <owl:ObjectProperty rdf:ID="isAgentInstantiatedBy"/>
    </owl:inverseOf>
    <rdfs:comment>A SocialAgent A1 instantiates another A2 when A1 is identical to A2 at a certain time. For example, Prodi2 Government instantiated the Italian Government in 2007.</rdfs:comment>
    <rdfs:label xml:lang="en">instantiates</rdfs:label>
    <rdfs:range rdf:resource="#SocialAgent"/>
    <rdfs:domain rdf:resource="#SocialAgent"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#hasSetting">
    <rdfs:label xml:lang="en">has setting</rdfs:label>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string">The settingFor relation is the projection of c.DnS over situations and entities. It formalizes the intuition of an entity being contextualized or 'situated'. For example: isSettingFor(MandateForGovernmentToProdi, Napolitano, 2007)</rdfs:comment>
    <rdfs:domain rdf:resource="#Entity"/>
    <rdfs:range rdf:resource="#Situation"/>
    <owl:inverseOf>
        <owl:ObjectProperty rdf:ID="isSettingFor"/>
    </owl:inverseOf>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#classifies">
    <rdfs:label xml:lang="en">classifies</rdfs:label>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string">The classif ies relation is the projection of c.DnS maximal relation over concepts and entities at a certain time. It formalizes the intuition of redescribing an entity, i.e. when a (new) cognitive context is applied to something that already has an identity in actually occurring situations in the life of a cognitive agent. For example, the following statement has the consequence that the social agent Napolitano is provided with the additional identity of ItalianPresidentRole for 2007: classifies(ItalianPresidentRole, Napolitano, 2007) Time variables cannot be expressed in OWL (only binary relations are available); for time indexing, see the ontology: ground.owl.</rdfs:comment>
    <rdfs:range rdf:resource="#Entity"/>
    <rdfs:domain rdf:resource="#Concept"/>
    <owl:inverseOf rdf:resource="#isClassifiedBy"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:ID="isSatisfiedBy">
    <rdfs:label xml:lang="en">is satisfied by</rdfs:label>
    <rdfs:domain rdf:resource="#Description"/>
    <rdfs:range rdf:resource="#Situation"/>
    <owl:inverseOf>
        <owl:ObjectProperty rdf:about="#satisfies"/>
    </owl:inverseOf>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:ID="isSpecializedBy">
    <rdfs:label xml:lang="en">is specialized by</rdfs:label>
    <owl:inverseOf>
        <owl:ObjectProperty rdf:ID="specializes"/>
    </owl:inverseOf>
    <rdfs:range rdf:resource="#SchematicEntity"/>
    <rdfs:domain rdf:resource="#SchematicEntity"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:ID="isDeputedBy">
    <rdfs:range rdf:resource="#SocialAgent"/>
    <rdfs:domain rdf:resource="#Concept"/>
    <rdfs:label xml:lang="en">is deputed by</rdfs:label>
    <owl:inverseOf>
        <owl:ObjectProperty rdf:ID="deputes"/>
    </owl:inverseOf>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:ID="describes">
    <rdfs:label xml:lang="en">describes</rdfs:label>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Compositional projections can be defined from primitive ones. The projection 'describes' is compositionally defined, and states that a Description describes an Entity when the latter isClassifiedBy a Concept that isDefinedIn the Description</rdfs:comment>
    <rdfs:domain rdf:resource="#Description"/>
    <rdfs:range rdf:resource="#Entity"/>
    <owl:inverseOf>
        <owl:ObjectProperty rdf:about="#isDescribedIn"/>
    </owl:inverseOf>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:ID="isInterpretedBy">
    <rdfs:domain rdf:resource="#GroundEntity"/>
    <owl:inverseOf>
        <owl:ObjectProperty rdf:ID="interprets"/>
    </owl:inverseOf>
    <rdfs:label xml:lang="en">is interpreted by</rdfs:label>
    <rdfs:range rdf:resource="#SocialAgent"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#isAgentInstantiatedBy">
    <rdfs:range rdf:resource="#SocialAgent"/>
    <rdfs:label xml:lang="en">is instantiated by</rdfs:label>
    <rdfs:domain rdf:resource="#SocialAgent"/>
    <owl:inverseOf rdf:resource="#instantiatesAgent"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#hasInScope">
    <rdfs:label xml:lang="en">has in scope</rdfs:label>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string">The hasInScope relation reflects the intuition that situations can be epistemologically layered when a description d1 describes another description d2. When this happens, any situation s1 that satisfies d1 'has in its scope' another situation s2 that satisfies d2. A theorem is that s1 is a setting for d2. For example: hasInScope(MurderCase_1, CaesarStabbedByBrutus) means that a certain murder case (a murder situation under a certain normative description) has in scope the social fact (an aggression situation under a social description) of Caesar being stabbed by Brutus. This assertion is the consequence that a normative description has been applied to a social fact, involving its social description (e.g. a witness report), which becomes an element in the setting of the murder case. Notice that we cannot also claim that Caesar being stabbed by Brutus is on its turn in the setting of the murder case, because the case is precisely about evaluating that reported fact, not about assuming it.</rdfs:comment>
    <owl:inverseOf rdf:resource="#isInScopeOf"/>
    <rdfs:domain rdf:resource="#Situation"/>
    <rdfs:range rdf:resource="#Situation"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#isRedescribedBy">
    <rdfs:range rdf:resource="#SocialAgent"/>
    <rdfs:domain rdf:resource="#Situation"/>
    <rdfs:label xml:lang="en">is redescribed by</rdfs:label>
    <owl:inverseOf rdf:resource="#redescribes"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#isSettingFor">
    <rdfs:label xml:lang="en">is setting for</rdfs:label>
    <rdfs:range rdf:resource="#Entity"/>
    <rdfs:domain rdf:resource="#Situation"/>
    <owl:inverseOf rdf:resource="#hasSetting"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#isReferentOf">
    <rdfs:label xml:lang="en">is referent of</rdfs:label>
    <owl:inverseOf rdf:resource="#isAbout"/>
    <rdfs:range rdf:resource="#InformationObject"/>
    <rdfs:domain rdf:resource="#Entity"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#isConceptualizedBy">
    <owl:inverseOf rdf:resource="#conceptualizes"/>
    <rdfs:domain rdf:resource="#SchematicEntity"/>
    <rdfs:range rdf:resource="#SocialAgent"/>
    <rdfs:label xml:lang="en">is conceptualized by</rdfs:label>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:ID="mutuallyDependent">
    <owl:inverseOf rdf:resource="#mutuallyDependent"/>
    <rdfs:domain rdf:resource="#Concept"/>
    <rdfs:range rdf:resource="#Concept"/>
    <rdfs:label xml:lang="en">mutually dependent</rdfs:label>
    <rdfs:comment>Two Concept(s) that are mutually dependent (dual) in the context of a ; for example, two arguer roles in a discussion, a buyer and a seller role, etc.</rdfs:comment>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#SymmetricProperty"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#isMemberOf">
    <rdfs:label xml:lang="en">is member of</rdfs:label>
    <owl:inverseOf rdf:resource="#hasMember"/>
    <rdfs:domain rdf:resource="#Entity"/>
    <rdfs:range rdf:resource="#Collection"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#isCoveredBy">
    <rdfs:label xml:lang="en">is covered by</rdfs:label>
    <rdfs:range rdf:resource="#Concept"/>
    <rdfs:domain rdf:resource="#Collection"/>
    <owl:inverseOf>
        <owl:ObjectProperty rdf:ID="covers"/>
    </owl:inverseOf>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#isActedBy">
    <rdfs:domain rdf:resource="#SocialAgent"/>
    <owl:inverseOf>
        <owl:ObjectProperty rdf:ID="actsFor"/>
    </owl:inverseOf>
    <rdfs:label xml:lang="en">is acted by</rdfs:label>
    <rdfs:range rdf:resource="#Entity"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#specializes">
    <rdfs:label xml:lang="en">specializes</rdfs:label>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string">The specializes relation is the projection of c.DnS between schematic entities. It conveys the intuition of a taxonomic schema across schematic entities. In the following example, the social agent Prodi2Government specializes Italian Government: specializes(Prodi2Government, ItalianGovernment) The difference between specializes and the traditional subClassOf and instanceOf relations is subtle. Firstly, specializes can be considered as a reification of subClassOf, since the latter holds for logical classes, while specializes holds for schematic entities. Secondly, since we are using first-order logic with a model-theoretic semantics, the subClassOf and instanceOf relations can also be used with schematic entities, and the choice between specializes and instanceOf often results to be a matter of good practice. For example, we may want to consider Government as a class instead of a social agent, if there is no given description that introduces government as a social agent. On the contrary, ItalianGovernment is introduced by the description ItalianConstitution, therefore it can be suitably modeled as a social agent. Therefore, Government is subClassOf A (Social Agent), Prodi2Government specializes ItalianGovernment, and both are instanceOf Government.</rdfs:comment>
    <owl:inverseOf rdf:resource="#isSpecializedBy"/>
    <rdfs:domain rdf:resource="#SchematicEntity"/>
    <rdfs:range rdf:resource="#SchematicEntity"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#introduces">
    <rdfs:range rdf:resource="#SocialAgent"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Descriptions can also introduce social agents, which are here entities such as persons, organizations, institutional figures, etc. For example: introduces(ItalianConstitution, ItalianGovernment) introduces(FIATLegalConstitution, FIAT_SpA) Although the introduction of agents falls under the relationality principle, like definition and usage, it has a different intuition from definition and usage, because concepts and agents are disjoint classes, where the differences are: agents can share descriptions, concepts can not agents (specially organizations) typically depute concepts, and not vice versa social agents are acted by some physical agent that is classified by some concept deputed by that social agent. Concepts are not acted by anything.</rdfs:comment>
    <rdfs:label xml:lang="en">introduces</rdfs:label>
    <rdfs:domain rdf:resource="#Description"/>
    <owl:inverseOf rdf:resource="#isIntroducedBy"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#unifies">
    <rdfs:label xml:lang="en">unifies</rdfs:label>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string">The descriptions that define the concept(s) or concept collections that cover a collection are said to unify it. The following statement unifies(ItalianConstitution, ItalianMinisterCouncil) can be inferred as a theorem, since unifies composes the relations defines and covers, the description ItalianConstitution defines the concept Minister, and Minister covers the collection ItalianMinisterCouncil, then ItalianConstitution unifies ItalianMinisterCouncil.</rdfs:comment>
    <rdfs:range rdf:resource="#Collection"/>
    <rdfs:domain rdf:resource="#Description"/>
    <owl:inverseOf rdf:resource="#isUnifiedBy"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#satisfies">
    <rdfs:label xml:lang="en">satisfies</rdfs:label>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string">The satisfies relation is the projection of c.DnS over situations and descriptions. It formalizes the intuition of an instantiation of a gestalt, or cognitive context. For example: satisfies(MandateForGovernmentToProdi, LawForGovernmentFormation)</rdfs:comment>
    <rdfs:range rdf:resource="#Description"/>
    <rdfs:domain rdf:resource="#Situation"/>
    <owl:inverseOf rdf:resource="#isSatisfiedBy"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#actsFor">
    <rdfs:range rdf:resource="#SocialAgent"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string">The actsFor relation holds for entities and social agents. It formalizes the intuition of acting for a social agent, i.e. the mapping of entities as actors that are classified by concepts that are deputed by a social agent (such a rule cannot be encoded in OWL1.0). It is temporalized in FOL (not in OWL1.0 for missing expressivity). For example, actsFor(Napolitano, ItalianState, 2007).</rdfs:comment>
    <rdfs:label xml:lang="en">acts for</rdfs:label>
    <rdfs:domain rdf:resource="#Entity"/>
    <owl:inverseOf rdf:resource="#isActedBy"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#covers">
    <rdfs:label xml:lang="en">covers</rdfs:label>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string">The concept(s) that classify all the members of a collection are said to cover a collection. the following statement is about the fact that the collective ItalianMinisterCouncil has all members that are classified by the concept Minister: covers(Minister, ItalianMinisterCouncil)</rdfs:comment>
    <rdfs:domain rdf:resource="#Concept"/>
    <rdfs:range rdf:resource="#Collection"/>
    <owl:inverseOf rdf:resource="#isCoveredBy"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#isExpressedBy">
    <rdfs:label xml:lang="en">is expressed by</rdfs:label>
    <owl:inverseOf rdf:resource="#expresses"/>
    <rdfs:range rdf:resource="#InformationObject"/>
    <rdfs:domain rdf:resource="#SchematicEntity"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#interprets">
    <rdfs:range rdf:resource="#GroundEntity"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string">The generic relation of interpretation between an agent and an entity at some time is a projection of c.DnS. In its full unfolding, it depends on the constructive assumption by which interpretation of entities by some agent at some time is logically dependent on descriptions, situations, concepts, collectives, and information objects.</rdfs:comment>
    <owl:inverseOf rdf:resource="#isInterpretedBy"/>
    <rdfs:domain rdf:resource="#SocialAgent"/>
    <rdfs:label xml:lang="en">interprets</rdfs:label>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#isConceptUsedIn">
    <rdfs:label xml:lang="en">is concept used in</rdfs:label>
    <rdfs:range rdf:resource="#Description"/>
    <rdfs:domain rdf:resource="#Concept"/>
    <owl:inverseOf rdf:resource="#usesConcept"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#isDescribedIn">
    <rdfs:label xml:lang="en">is described in</rdfs:label>
    <owl:inverseOf rdf:resource="#describes"/>
    <rdfs:range rdf:resource="#Description"/>
    <rdfs:domain rdf:resource="#Entity"/>
</owl:ObjectProperty>
<owl:ObjectProperty rdf:about="#deputes">
    <rdfs:domain rdf:resource="#SocialAgent"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Social agents can depute concepts (e.g. roles) that are supposed to enact the actions of a social agent. For example, a telecom company can depute the role engineer that can classify certain entities (typically, persons with appropriate curricula) to act for the company. This is a legal example: deputes(ItalianState, ItalianPresident, 2006)</rdfs:comment>
    <rdfs:range rdf:resource="#Concept"/>
    <rdfs:label xml:lang="en">deputes</rdfs:label>
    <owl:inverseOf rdf:resource="#isDeputedBy"/>
</owl:ObjectProperty>
<owl:TransitiveProperty rdf:about="#hasProperPart">
    <rdfs:label xml:lang="en">has proper part</rdfs:label>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string">The usual mereological relation: transitive, asymmetric, and irreflexive.</rdfs:comment>
    <owl:inverseOf>
        <owl:TransitiveProperty rdf:ID="isProperPartOf"/>
    </owl:inverseOf>
    <rdfs:domain rdf:resource="#Entity"/>
    <rdfs:range rdf:resource="#Entity"/>
</owl:TransitiveProperty>
<owl:TransitiveProperty rdf:about="#isProperPartOf">
    <rdfs:label xml:lang="en">is proper part of</rdfs:label>
    <owl:inverseOf rdf:resource="#hasProperPart"/>
    <rdfs:range rdf:resource="#Entity"/>
    <rdfs:domain rdf:resource="#Entity"/>
</owl:TransitiveProperty>
</rdf:RDF>
